/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated


import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.generated.tables.Actor
import org.jooq.generated.tables.Address
import org.jooq.generated.tables.Category
import org.jooq.generated.tables.City
import org.jooq.generated.tables.Country
import org.jooq.generated.tables.Customer
import org.jooq.generated.tables.CustomerList
import org.jooq.generated.tables.Film
import org.jooq.generated.tables.FilmActor
import org.jooq.generated.tables.FilmCategory
import org.jooq.generated.tables.FilmList
import org.jooq.generated.tables.FilmText
import org.jooq.generated.tables.Inventory
import org.jooq.generated.tables.Language
import org.jooq.generated.tables.NicerButSlowerFilmList
import org.jooq.generated.tables.Payment
import org.jooq.generated.tables.Rental
import org.jooq.generated.tables.SalesByFilmCategory
import org.jooq.generated.tables.SalesByStore
import org.jooq.generated.tables.Staff
import org.jooq.generated.tables.StaffList
import org.jooq.generated.tables.Store
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Sakila : SchemaImpl("sakila", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>sakila</code>
         */
        val SAKILA: Sakila = Sakila()
    }

    /**
     * The table <code>sakila.actor</code>.
     */
    val ACTOR: Actor get() = Actor.ACTOR

    /**
     * The table <code>sakila.address</code>.
     */
    val ADDRESS: Address get() = Address.ADDRESS

    /**
     * The table <code>sakila.category</code>.
     */
    val CATEGORY: Category get() = Category.CATEGORY

    /**
     * The table <code>sakila.city</code>.
     */
    val CITY: City get() = City.CITY

    /**
     * The table <code>sakila.country</code>.
     */
    val COUNTRY: Country get() = Country.COUNTRY

    /**
     * The table <code>sakila.customer</code>.
     */
    val CUSTOMER: Customer get() = Customer.CUSTOMER

    /**
     * VIEW
     */
    val CUSTOMER_LIST: CustomerList get() = CustomerList.CUSTOMER_LIST

    /**
     * The table <code>sakila.film</code>.
     */
    val FILM: Film get() = Film.FILM

    /**
     * The table <code>sakila.film_actor</code>.
     */
    val FILM_ACTOR: FilmActor get() = FilmActor.FILM_ACTOR

    /**
     * The table <code>sakila.film_category</code>.
     */
    val FILM_CATEGORY: FilmCategory get() = FilmCategory.FILM_CATEGORY

    /**
     * VIEW
     */
    val FILM_LIST: FilmList get() = FilmList.FILM_LIST

    /**
     * The table <code>sakila.film_text</code>.
     */
    val FILM_TEXT: FilmText get() = FilmText.FILM_TEXT

    /**
     * The table <code>sakila.inventory</code>.
     */
    val INVENTORY: Inventory get() = Inventory.INVENTORY

    /**
     * The table <code>sakila.language</code>.
     */
    val LANGUAGE: Language get() = Language.LANGUAGE

    /**
     * VIEW
     */
    val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList get() = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

    /**
     * The table <code>sakila.payment</code>.
     */
    val PAYMENT: Payment get() = Payment.PAYMENT

    /**
     * The table <code>sakila.rental</code>.
     */
    val RENTAL: Rental get() = Rental.RENTAL

    /**
     * VIEW
     */
    val SALES_BY_FILM_CATEGORY: SalesByFilmCategory get() = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

    /**
     * VIEW
     */
    val SALES_BY_STORE: SalesByStore get() = SalesByStore.SALES_BY_STORE

    /**
     * The table <code>sakila.staff</code>.
     */
    val STAFF: Staff get() = Staff.STAFF

    /**
     * VIEW
     */
    val STAFF_LIST: StaffList get() = StaffList.STAFF_LIST

    /**
     * The table <code>sakila.store</code>.
     */
    val STORE: Store get() = Store.STORE

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Actor.ACTOR,
        Address.ADDRESS,
        Category.CATEGORY,
        City.CITY,
        Country.COUNTRY,
        Customer.CUSTOMER,
        CustomerList.CUSTOMER_LIST,
        Film.FILM,
        FilmActor.FILM_ACTOR,
        FilmCategory.FILM_CATEGORY,
        FilmList.FILM_LIST,
        FilmText.FILM_TEXT,
        Inventory.INVENTORY,
        Language.LANGUAGE,
        NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST,
        Payment.PAYMENT,
        Rental.RENTAL,
        SalesByFilmCategory.SALES_BY_FILM_CATEGORY,
        SalesByStore.SALES_BY_STORE,
        Staff.STAFF,
        StaffList.STAFF_LIST,
        Store.STORE
    )
}
