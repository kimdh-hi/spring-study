/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.Inventory
import org.jooq.generated.tables.records.InventoryRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InventoryDao(configuration: Configuration?) : DAOImpl<InventoryRecord, org.jooq.generated.tables.pojos.Inventory, UInteger>(Inventory.INVENTORY, org.jooq.generated.tables.pojos.Inventory::class.java, configuration) {

    /**
     * Create a new InventoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.generated.tables.pojos.Inventory): UInteger? = o.inventoryId

    /**
     * Fetch records that have <code>inventory_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfInventoryId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Inventory> = fetchRange(Inventory.INVENTORY.INVENTORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inventory_id IN (values)</code>
     */
    fun fetchByInventoryId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Inventory> = fetch(Inventory.INVENTORY.INVENTORY_ID, *values)

    /**
     * Fetch a unique record that has <code>inventory_id = value</code>
     */
    fun fetchOneByInventoryId(value: UInteger): org.jooq.generated.tables.pojos.Inventory? = fetchOne(Inventory.INVENTORY.INVENTORY_ID, value)

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilmId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Inventory> = fetchRange(Inventory.INVENTORY.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByFilmId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Inventory> = fetch(Inventory.INVENTORY.FILM_ID, *values)

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStoreId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Inventory> = fetchRange(Inventory.INVENTORY.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByStoreId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Inventory> = fetch(Inventory.INVENTORY.STORE_ID, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.generated.tables.pojos.Inventory> = fetchRange(Inventory.INVENTORY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.generated.tables.pojos.Inventory> = fetch(Inventory.INVENTORY.LAST_UPDATE, *values)
}
