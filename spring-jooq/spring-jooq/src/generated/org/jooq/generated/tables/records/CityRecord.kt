/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.generated.tables.JCity
import org.jooq.generated.tables.pojos.City
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CityRecord() : UpdatableRecordImpl<CityRecord>(JCity.CITY) {

    open var cityId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var city: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var countryId: UInteger?
        set(value): Unit = set(2, value)
        get(): UInteger? = get(2) as UInteger?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UInteger?> = super.key() as Record1<UInteger?>

    /**
     * Create a detached, initialised CityRecord
     */
    constructor(cityId: UInteger? = null, city: String? = null, countryId: UInteger? = null, lastUpdate: LocalDateTime? = null): this() {
        this.cityId = cityId
        this.city = city
        this.countryId = countryId
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CityRecord
     */
    constructor(value: City?): this() {
        if (value != null) {
            this.cityId = value.cityId
            this.city = value.city
            this.countryId = value.countryId
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
