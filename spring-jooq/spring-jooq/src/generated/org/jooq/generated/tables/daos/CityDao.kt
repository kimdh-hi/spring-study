/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.JCity
import org.jooq.generated.tables.pojos.City
import org.jooq.generated.tables.records.CityRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CityDao(configuration: Configuration?) : DAOImpl<CityRecord, City, UInteger>(JCity.CITY, City::class.java, configuration) {

    /**
     * Create a new CityDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: City): UInteger? = o.cityId

    /**
     * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCityId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<City> = fetchRange(JCity.CITY.CITY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city_id IN (values)</code>
     */
    fun fetchByJCityId(vararg values: UInteger): List<City> = fetch(JCity.CITY.CITY_ID, *values)

    /**
     * Fetch a unique record that has <code>city_id = value</code>
     */
    fun fetchOneByJCityId(value: UInteger): City? = fetchOne(JCity.CITY.CITY_ID, value)

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCity(lowerInclusive: String?, upperInclusive: String?): List<City> = fetchRange(JCity.CITY.CITY_, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    fun fetchByJCity(vararg values: String): List<City> = fetch(JCity.CITY.CITY_, *values)

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCountryId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<City> = fetchRange(JCity.CITY.COUNTRY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    fun fetchByJCountryId(vararg values: UInteger): List<City> = fetch(JCity.CITY.COUNTRY_ID, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<City> = fetchRange(JCity.CITY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByJLastUpdate(vararg values: LocalDateTime): List<City> = fetch(JCity.CITY.LAST_UPDATE, *values)
}
