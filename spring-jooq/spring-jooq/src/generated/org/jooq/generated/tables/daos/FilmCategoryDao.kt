/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.generated.tables.FilmCategory
import org.jooq.generated.tables.records.FilmCategoryRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmCategoryDao(configuration: Configuration?) : DAOImpl<FilmCategoryRecord, org.jooq.generated.tables.pojos.FilmCategory, Record2<UInteger?, UInteger?>>(FilmCategory.FILM_CATEGORY, org.jooq.generated.tables.pojos.FilmCategory::class.java, configuration) {

    /**
     * Create a new FilmCategoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.generated.tables.pojos.FilmCategory): Record2<UInteger?, UInteger?> = compositeKeyRecord(o.filmId, o.categoryId)

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilmId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByFilmId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.FILM_ID, *values)

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCategoryId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.CATEGORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    fun fetchByCategoryId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.CATEGORY_ID, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.generated.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.generated.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.LAST_UPDATE, *values)
}
