/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.JActor
import org.jooq.generated.tables.pojos.Actor
import org.jooq.generated.tables.records.ActorRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActorDao(configuration: Configuration?) : DAOImpl<ActorRecord, Actor, UInteger>(JActor.ACTOR, Actor::class.java, configuration) {

    /**
     * Create a new ActorDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Actor): UInteger? = o.actorId

    /**
     * Fetch records that have <code>actor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJActorId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Actor> = fetchRange(JActor.ACTOR.ACTOR_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>actor_id IN (values)</code>
     */
    fun fetchByJActorId(vararg values: UInteger): List<Actor> = fetch(JActor.ACTOR.ACTOR_ID, *values)

    /**
     * Fetch a unique record that has <code>actor_id = value</code>
     */
    fun fetchOneByJActorId(value: UInteger): Actor? = fetchOne(JActor.ACTOR.ACTOR_ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJFirstName(lowerInclusive: String?, upperInclusive: String?): List<Actor> = fetchRange(JActor.ACTOR.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByJFirstName(vararg values: String): List<Actor> = fetch(JActor.ACTOR.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastName(lowerInclusive: String?, upperInclusive: String?): List<Actor> = fetchRange(JActor.ACTOR.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByJLastName(vararg values: String): List<Actor> = fetch(JActor.ACTOR.LAST_NAME, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Actor> = fetchRange(JActor.ACTOR.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByJLastUpdate(vararg values: LocalDateTime): List<Actor> = fetch(JActor.ACTOR.LAST_UPDATE, *values)
}
