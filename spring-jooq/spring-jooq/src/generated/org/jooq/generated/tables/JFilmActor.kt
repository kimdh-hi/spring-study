/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.generated.JSakila
import org.jooq.generated.indexes.FILM_ACTOR_IDX_FK_FILM_ID
import org.jooq.generated.keys.FK_FILM_ACTOR_ACTOR
import org.jooq.generated.keys.FK_FILM_ACTOR_FILM
import org.jooq.generated.keys.KEY_FILM_ACTOR_PRIMARY
import org.jooq.generated.tables.JActor.ActorPath
import org.jooq.generated.tables.JFilm.FilmPath
import org.jooq.generated.tables.records.FilmActorRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JFilmActor(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FilmActorRecord>?,
    parentPath: InverseForeignKey<out Record, FilmActorRecord>?,
    aliased: Table<FilmActorRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FilmActorRecord>(
    alias,
    JSakila.SAKILA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sakila.film_actor</code>
         */
        val FILM_ACTOR: JFilmActor = JFilmActor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmActorRecord> = FilmActorRecord::class.java

    /**
     * The column <code>sakila.film_actor.actor_id</code>.
     */
    val ACTOR_ID: TableField<FilmActorRecord, UInteger?> = createField(DSL.name("actor_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sakila.film_actor.film_id</code>.
     */
    val FILM_ID: TableField<FilmActorRecord, UInteger?> = createField(DSL.name("film_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sakila.film_actor.last_update</code>.
     */
    val LAST_UPDATE: TableField<FilmActorRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<FilmActorRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<FilmActorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<FilmActorRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sakila.film_actor</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sakila.film_actor</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sakila.film_actor</code> table reference
     */
    constructor(): this(DSL.name("film_actor"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmActorRecord>?, parentPath: InverseForeignKey<out Record, FilmActorRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, FILM_ACTOR, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class FilmActorPath : JFilmActor, Path<FilmActorRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmActorRecord>?, parentPath: InverseForeignKey<out Record, FilmActorRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<FilmActorRecord>): super(alias, aliased)
        override fun `as`(alias: String): FilmActorPath = FilmActorPath(DSL.name(alias), this)
        override fun `as`(alias: Name): FilmActorPath = FilmActorPath(alias, this)
        override fun `as`(alias: Table<*>): FilmActorPath = FilmActorPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JSakila.SAKILA
    override fun getIndexes(): List<Index> = listOf(FILM_ACTOR_IDX_FK_FILM_ID)
    override fun getPrimaryKey(): UniqueKey<FilmActorRecord> = KEY_FILM_ACTOR_PRIMARY
    override fun getReferences(): List<ForeignKey<FilmActorRecord, *>> = listOf(FK_FILM_ACTOR_ACTOR, FK_FILM_ACTOR_FILM)

    private lateinit var _actor: ActorPath

    /**
     * Get the implicit join path to the <code>sakila.actor</code> table.
     */
    fun actor(): ActorPath {
        if (!this::_actor.isInitialized)
            _actor = ActorPath(this, FK_FILM_ACTOR_ACTOR, null)

        return _actor;
    }

    val actor: ActorPath
        get(): ActorPath = actor()

    private lateinit var _film: FilmPath

    /**
     * Get the implicit join path to the <code>sakila.film</code> table.
     */
    fun film(): FilmPath {
        if (!this::_film.isInitialized)
            _film = FilmPath(this, FK_FILM_ACTOR_FILM, null)

        return _film;
    }

    val film: FilmPath
        get(): FilmPath = film()
    override fun `as`(alias: String): JFilmActor = JFilmActor(DSL.name(alias), this)
    override fun `as`(alias: Name): JFilmActor = JFilmActor(alias, this)
    override fun `as`(alias: Table<*>): JFilmActor = JFilmActor(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JFilmActor = JFilmActor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JFilmActor = JFilmActor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JFilmActor = JFilmActor(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): JFilmActor = JFilmActor(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JFilmActor = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): JFilmActor = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): JFilmActor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JFilmActor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JFilmActor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JFilmActor = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JFilmActor = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JFilmActor = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JFilmActor = where(DSL.notExists(select))
}
