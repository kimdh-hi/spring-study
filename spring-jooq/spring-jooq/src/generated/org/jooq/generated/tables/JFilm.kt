/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import java.math.BigDecimal
import java.time.LocalDateTime
import java.time.Year

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.generated.JSakila
import org.jooq.generated.enums.FilmRating
import org.jooq.generated.indexes.FILM_IDX_FK_LANGUAGE_ID
import org.jooq.generated.indexes.FILM_IDX_FK_ORIGINAL_LANGUAGE_ID
import org.jooq.generated.indexes.FILM_IDX_TITLE
import org.jooq.generated.keys.FK_FILM_ACTOR_FILM
import org.jooq.generated.keys.FK_FILM_CATEGORY_FILM
import org.jooq.generated.keys.FK_FILM_LANGUAGE
import org.jooq.generated.keys.FK_FILM_LANGUAGE_ORIGINAL
import org.jooq.generated.keys.FK_INVENTORY_FILM
import org.jooq.generated.keys.KEY_FILM_PRIMARY
import org.jooq.generated.tables.JActor.ActorPath
import org.jooq.generated.tables.JCategory.CategoryPath
import org.jooq.generated.tables.JFilmActor.FilmActorPath
import org.jooq.generated.tables.JFilmCategory.FilmCategoryPath
import org.jooq.generated.tables.JInventory.InventoryPath
import org.jooq.generated.tables.JLanguage.LanguagePath
import org.jooq.generated.tables.records.FilmRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JFilm(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FilmRecord>?,
    parentPath: InverseForeignKey<out Record, FilmRecord>?,
    aliased: Table<FilmRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FilmRecord>(
    alias,
    JSakila.SAKILA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sakila.film</code>
         */
        val FILM: JFilm = JFilm()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmRecord> = FilmRecord::class.java

    /**
     * The column <code>sakila.film.film_id</code>.
     */
    val FILM_ID: TableField<FilmRecord, UInteger?> = createField(DSL.name("film_id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "")

    /**
     * The column <code>sakila.film.title</code>.
     */
    val TITLE: TableField<FilmRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>sakila.film.description</code>.
     */
    val DESCRIPTION: TableField<FilmRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sakila.film.release_year</code>.
     */
    val RELEASE_YEAR: TableField<FilmRecord, Year?> = createField(DSL.name("release_year"), SQLDataType.YEAR, this, "")

    /**
     * The column <code>sakila.film.language_id</code>.
     */
    val LANGUAGE_ID: TableField<FilmRecord, UInteger?> = createField(DSL.name("language_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    /**
     * The column <code>sakila.film.original_language_id</code>.
     */
    val ORIGINAL_LANGUAGE_ID: TableField<FilmRecord, UInteger?> = createField(DSL.name("original_language_id"), SQLDataType.INTEGERUNSIGNED, this, "")

    /**
     * The column <code>sakila.film.rental_duration</code>.
     */
    val RENTAL_DURATION: TableField<FilmRecord, UByte?> = createField(DSL.name("rental_duration"), SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(DSL.inline("3", SQLDataType.TINYINTUNSIGNED)), this, "")

    /**
     * The column <code>sakila.film.rental_rate</code>.
     */
    val RENTAL_RATE: TableField<FilmRecord, BigDecimal?> = createField(DSL.name("rental_rate"), SQLDataType.DECIMAL(4, 2).nullable(false).defaultValue(DSL.inline("4.99", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>sakila.film.length</code>.
     */
    val LENGTH: TableField<FilmRecord, UShort?> = createField(DSL.name("length"), SQLDataType.SMALLINTUNSIGNED, this, "")

    /**
     * The column <code>sakila.film.replacement_cost</code>.
     */
    val REPLACEMENT_COST: TableField<FilmRecord, BigDecimal?> = createField(DSL.name("replacement_cost"), SQLDataType.DECIMAL(5, 2).nullable(false).defaultValue(DSL.inline("19.99", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>sakila.film.rating</code>.
     */
    val RATING: TableField<FilmRecord, FilmRating?> = createField(DSL.name("rating"), SQLDataType.VARCHAR(5).defaultValue(DSL.inline("G", SQLDataType.VARCHAR)).asEnumDataType(FilmRating::class.java), this, "")

    /**
     * The column <code>sakila.film.special_features</code>.
     */
    val SPECIAL_FEATURES: TableField<FilmRecord, String?> = createField(DSL.name("special_features"), SQLDataType.VARCHAR(54), this, "")

    /**
     * The column <code>sakila.film.last_update</code>.
     */
    val LAST_UPDATE: TableField<FilmRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<FilmRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<FilmRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<FilmRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sakila.film</code> table reference
     */
    constructor(): this(DSL.name("film"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmRecord>?, parentPath: InverseForeignKey<out Record, FilmRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, FILM, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class FilmPath : JFilm, Path<FilmRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmRecord>?, parentPath: InverseForeignKey<out Record, FilmRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<FilmRecord>): super(alias, aliased)
        override fun `as`(alias: String): FilmPath = FilmPath(DSL.name(alias), this)
        override fun `as`(alias: Name): FilmPath = FilmPath(alias, this)
        override fun `as`(alias: Table<*>): FilmPath = FilmPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else JSakila.SAKILA
    override fun getIndexes(): List<Index> = listOf(FILM_IDX_FK_LANGUAGE_ID, FILM_IDX_FK_ORIGINAL_LANGUAGE_ID, FILM_IDX_TITLE)
    override fun getIdentity(): Identity<FilmRecord, UInteger?> = super.getIdentity() as Identity<FilmRecord, UInteger?>
    override fun getPrimaryKey(): UniqueKey<FilmRecord> = KEY_FILM_PRIMARY
    override fun getReferences(): List<ForeignKey<FilmRecord, *>> = listOf(FK_FILM_LANGUAGE, FK_FILM_LANGUAGE_ORIGINAL)

    private lateinit var _fkFilmLanguage: LanguagePath

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language</code> key.
     */
    fun fkFilmLanguage(): LanguagePath {
        if (!this::_fkFilmLanguage.isInitialized)
            _fkFilmLanguage = LanguagePath(this, FK_FILM_LANGUAGE, null)

        return _fkFilmLanguage;
    }

    val fkFilmLanguage: LanguagePath
        get(): LanguagePath = fkFilmLanguage()

    private lateinit var _fkFilmLanguageOriginal: LanguagePath

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language_original</code> key.
     */
    fun fkFilmLanguageOriginal(): LanguagePath {
        if (!this::_fkFilmLanguageOriginal.isInitialized)
            _fkFilmLanguageOriginal = LanguagePath(this, FK_FILM_LANGUAGE_ORIGINAL, null)

        return _fkFilmLanguageOriginal;
    }

    val fkFilmLanguageOriginal: LanguagePath
        get(): LanguagePath = fkFilmLanguageOriginal()

    private lateinit var _filmActor: FilmActorPath

    /**
     * Get the implicit to-many join path to the <code>sakila.film_actor</code>
     * table
     */
    fun filmActor(): FilmActorPath {
        if (!this::_filmActor.isInitialized)
            _filmActor = FilmActorPath(this, null, FK_FILM_ACTOR_FILM.inverseKey)

        return _filmActor;
    }

    val filmActor: FilmActorPath
        get(): FilmActorPath = filmActor()

    private lateinit var _filmCategory: FilmCategoryPath

    /**
     * Get the implicit to-many join path to the
     * <code>sakila.film_category</code> table
     */
    fun filmCategory(): FilmCategoryPath {
        if (!this::_filmCategory.isInitialized)
            _filmCategory = FilmCategoryPath(this, null, FK_FILM_CATEGORY_FILM.inverseKey)

        return _filmCategory;
    }

    val filmCategory: FilmCategoryPath
        get(): FilmCategoryPath = filmCategory()

    private lateinit var _inventory: InventoryPath

    /**
     * Get the implicit to-many join path to the <code>sakila.inventory</code>
     * table
     */
    fun inventory(): InventoryPath {
        if (!this::_inventory.isInitialized)
            _inventory = InventoryPath(this, null, FK_INVENTORY_FILM.inverseKey)

        return _inventory;
    }

    val inventory: InventoryPath
        get(): InventoryPath = inventory()

    /**
     * Get the implicit many-to-many join path to the <code>sakila.actor</code>
     * table
     */
    val actor: ActorPath
        get(): ActorPath = filmActor().actor()

    /**
     * Get the implicit many-to-many join path to the
     * <code>sakila.category</code> table
     */
    val category: CategoryPath
        get(): CategoryPath = filmCategory().category()
    override fun `as`(alias: String): JFilm = JFilm(DSL.name(alias), this)
    override fun `as`(alias: Name): JFilm = JFilm(alias, this)
    override fun `as`(alias: Table<*>): JFilm = JFilm(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JFilm = JFilm(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JFilm = JFilm(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JFilm = JFilm(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): JFilm = JFilm(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JFilm = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): JFilm = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): JFilm = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JFilm = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JFilm = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JFilm = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JFilm = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JFilm = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JFilm = where(DSL.notExists(select))
}
