/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.Country
import org.jooq.generated.tables.records.CountryRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CountryDao(configuration: Configuration?) : DAOImpl<CountryRecord, org.jooq.generated.tables.pojos.Country, UInteger>(Country.COUNTRY, org.jooq.generated.tables.pojos.Country::class.java, configuration) {

    /**
     * Create a new CountryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.generated.tables.pojos.Country): UInteger? = o.countryId

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountryId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Country> = fetchRange(Country.COUNTRY.COUNTRY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    fun fetchByCountryId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Country> = fetch(Country.COUNTRY.COUNTRY_ID, *values)

    /**
     * Fetch a unique record that has <code>country_id = value</code>
     */
    fun fetchOneByCountryId(value: UInteger): org.jooq.generated.tables.pojos.Country? = fetchOne(Country.COUNTRY.COUNTRY_ID, value)

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountry(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Country> = fetchRange(Country.COUNTRY.COUNTRY_, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    fun fetchByCountry(vararg values: String): List<org.jooq.generated.tables.pojos.Country> = fetch(Country.COUNTRY.COUNTRY_, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.generated.tables.pojos.Country> = fetchRange(Country.COUNTRY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.generated.tables.pojos.Country> = fetch(Country.COUNTRY.LAST_UPDATE, *values)
}
