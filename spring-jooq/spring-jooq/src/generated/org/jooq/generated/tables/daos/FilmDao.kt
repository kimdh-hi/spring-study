/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime
import java.time.Year

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.enums.FilmRating
import org.jooq.generated.tables.JFilm
import org.jooq.generated.tables.pojos.Film
import org.jooq.generated.tables.records.FilmRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmDao(configuration: Configuration?) : DAOImpl<FilmRecord, Film, UInteger>(JFilm.FILM, Film::class.java, configuration) {

    /**
     * Create a new FilmDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Film): UInteger? = o.filmId

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJFilmId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Film> = fetchRange(JFilm.FILM.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByJFilmId(vararg values: UInteger): List<Film> = fetch(JFilm.FILM.FILM_ID, *values)

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    fun fetchOneByJFilmId(value: UInteger): Film? = fetchOne(JFilm.FILM.FILM_ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJTitle(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(JFilm.FILM.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByJTitle(vararg values: String): List<Film> = fetch(JFilm.FILM.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJDescription(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(JFilm.FILM.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByJDescription(vararg values: String): List<Film> = fetch(JFilm.FILM.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJReleaseYear(lowerInclusive: Year?, upperInclusive: Year?): List<Film> = fetchRange(JFilm.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>release_year IN (values)</code>
     */
    fun fetchByJReleaseYear(vararg values: Year): List<Film> = fetch(JFilm.FILM.RELEASE_YEAR, *values)

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLanguageId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Film> = fetchRange(JFilm.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    fun fetchByJLanguageId(vararg values: UInteger): List<Film> = fetch(JFilm.FILM.LANGUAGE_ID, *values)

    /**
     * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfJOriginalLanguageId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Film> = fetchRange(JFilm.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>original_language_id IN (values)</code>
     */
    fun fetchByJOriginalLanguageId(vararg values: UInteger): List<Film> = fetch(JFilm.FILM.ORIGINAL_LANGUAGE_ID, *values)

    /**
     * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJRentalDuration(lowerInclusive: UByte?, upperInclusive: UByte?): List<Film> = fetchRange(JFilm.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_duration IN (values)</code>
     */
    fun fetchByJRentalDuration(vararg values: UByte): List<Film> = fetch(JFilm.FILM.RENTAL_DURATION, *values)

    /**
     * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJRentalRate(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<Film> = fetchRange(JFilm.FILM.RENTAL_RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_rate IN (values)</code>
     */
    fun fetchByJRentalRate(vararg values: BigDecimal): List<Film> = fetch(JFilm.FILM.RENTAL_RATE, *values)

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLength(lowerInclusive: UShort?, upperInclusive: UShort?): List<Film> = fetchRange(JFilm.FILM.LENGTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    fun fetchByJLength(vararg values: UShort): List<Film> = fetch(JFilm.FILM.LENGTH, *values)

    /**
     * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJReplacementCost(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<Film> = fetchRange(JFilm.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>replacement_cost IN (values)</code>
     */
    fun fetchByJReplacementCost(vararg values: BigDecimal): List<Film> = fetch(JFilm.FILM.REPLACEMENT_COST, *values)

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJRating(lowerInclusive: FilmRating?, upperInclusive: FilmRating?): List<Film> = fetchRange(JFilm.FILM.RATING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    fun fetchByJRating(vararg values: FilmRating): List<Film> = fetch(JFilm.FILM.RATING, *values)

    /**
     * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJSpecialFeatures(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(JFilm.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>special_features IN (values)</code>
     */
    fun fetchByJSpecialFeatures(vararg values: String): List<Film> = fetch(JFilm.FILM.SPECIAL_FEATURES, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Film> = fetchRange(JFilm.FILM.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByJLastUpdate(vararg values: LocalDateTime): List<Film> = fetch(JFilm.FILM.LAST_UPDATE, *values)
}
