/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime
import java.time.Year

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.enums.FilmRating
import org.jooq.generated.tables.Film
import org.jooq.generated.tables.records.FilmRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmDao(configuration: Configuration?) : DAOImpl<FilmRecord, org.jooq.generated.tables.pojos.Film, UInteger>(Film.FILM, org.jooq.generated.tables.pojos.Film::class.java, configuration) {

    /**
     * Create a new FilmDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.generated.tables.pojos.Film): UInteger? = o.filmId

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilmId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByFilmId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.FILM_ID, *values)

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    fun fetchOneByFilmId(value: UInteger): org.jooq.generated.tables.pojos.Film? = fetchOne(Film.FILM.FILM_ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReleaseYear(lowerInclusive: Year?, upperInclusive: Year?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>release_year IN (values)</code>
     */
    fun fetchByReleaseYear(vararg values: Year): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.RELEASE_YEAR, *values)

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLanguageId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    fun fetchByLanguageId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.LANGUAGE_ID, *values)

    /**
     * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfOriginalLanguageId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>original_language_id IN (values)</code>
     */
    fun fetchByOriginalLanguageId(vararg values: UInteger): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.ORIGINAL_LANGUAGE_ID, *values)

    /**
     * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalDuration(lowerInclusive: UByte?, upperInclusive: UByte?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_duration IN (values)</code>
     */
    fun fetchByRentalDuration(vararg values: UByte): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.RENTAL_DURATION, *values)

    /**
     * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalRate(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.RENTAL_RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_rate IN (values)</code>
     */
    fun fetchByRentalRate(vararg values: BigDecimal): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.RENTAL_RATE, *values)

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLength(lowerInclusive: UShort?, upperInclusive: UShort?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.LENGTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    fun fetchByLength(vararg values: UShort): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.LENGTH, *values)

    /**
     * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReplacementCost(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>replacement_cost IN (values)</code>
     */
    fun fetchByReplacementCost(vararg values: BigDecimal): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.REPLACEMENT_COST, *values)

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRating(lowerInclusive: FilmRating?, upperInclusive: FilmRating?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.RATING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    fun fetchByRating(vararg values: FilmRating): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.RATING, *values)

    /**
     * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSpecialFeatures(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>special_features IN (values)</code>
     */
    fun fetchBySpecialFeatures(vararg values: String): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.SPECIAL_FEATURES, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.generated.tables.pojos.Film> = fetchRange(Film.FILM.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.generated.tables.pojos.Film> = fetch(Film.FILM.LAST_UPDATE, *values)
}
