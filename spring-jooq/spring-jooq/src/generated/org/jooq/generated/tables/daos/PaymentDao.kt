/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.JPayment
import org.jooq.generated.tables.pojos.Payment
import org.jooq.generated.tables.records.PaymentRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentDao(configuration: Configuration?) : DAOImpl<PaymentRecord, Payment, UInteger>(JPayment.PAYMENT, Payment::class.java, configuration) {

    /**
     * Create a new PaymentDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Payment): UInteger? = o.paymentId

    /**
     * Fetch records that have <code>payment_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJPaymentId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Payment> = fetchRange(JPayment.PAYMENT.PAYMENT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payment_id IN (values)</code>
     */
    fun fetchByJPaymentId(vararg values: UInteger): List<Payment> = fetch(JPayment.PAYMENT.PAYMENT_ID, *values)

    /**
     * Fetch a unique record that has <code>payment_id = value</code>
     */
    fun fetchOneByJPaymentId(value: UInteger): Payment? = fetchOne(JPayment.PAYMENT.PAYMENT_ID, value)

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCustomerId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Payment> = fetchRange(JPayment.PAYMENT.CUSTOMER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    fun fetchByJCustomerId(vararg values: UInteger): List<Payment> = fetch(JPayment.PAYMENT.CUSTOMER_ID, *values)

    /**
     * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJStaffId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Payment> = fetchRange(JPayment.PAYMENT.STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>staff_id IN (values)</code>
     */
    fun fetchByJStaffId(vararg values: UInteger): List<Payment> = fetch(JPayment.PAYMENT.STAFF_ID, *values)

    /**
     * Fetch records that have <code>rental_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJRentalId(lowerInclusive: Int?, upperInclusive: Int?): List<Payment> = fetchRange(JPayment.PAYMENT.RENTAL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_id IN (values)</code>
     */
    fun fetchByJRentalId(vararg values: Int): List<Payment> = fetch(JPayment.PAYMENT.RENTAL_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJAmount(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<Payment> = fetchRange(JPayment.PAYMENT.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByJAmount(vararg values: BigDecimal): List<Payment> = fetch(JPayment.PAYMENT.AMOUNT, *values)

    /**
     * Fetch records that have <code>payment_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJPaymentDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Payment> = fetchRange(JPayment.PAYMENT.PAYMENT_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payment_date IN (values)</code>
     */
    fun fetchByJPaymentDate(vararg values: LocalDateTime): List<Payment> = fetch(JPayment.PAYMENT.PAYMENT_DATE, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Payment> = fetchRange(JPayment.PAYMENT.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByJLastUpdate(vararg values: LocalDateTime): List<Payment> = fetch(JPayment.PAYMENT.LAST_UPDATE, *values)
}
