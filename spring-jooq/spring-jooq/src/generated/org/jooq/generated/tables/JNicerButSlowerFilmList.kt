/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import java.math.BigDecimal

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.generated.JSakila
import org.jooq.generated.enums.NicerButSlowerFilmListRating
import org.jooq.generated.tables.records.NicerButSlowerFilmListRecord
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class JNicerButSlowerFilmList(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, NicerButSlowerFilmListRecord>?,
    parentPath: InverseForeignKey<out Record, NicerButSlowerFilmListRecord>?,
    aliased: Table<NicerButSlowerFilmListRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<NicerButSlowerFilmListRecord>(
    alias,
    JSakila.SAKILA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `nicer_but_slower_film_list` as select `sakila`.`film`.`film_id` AS `FID`,`sakila`.`film`.`title` AS `title`,`sakila`.`film`.`description` AS `description`,`sakila`.`category`.`name` AS `category`,`sakila`.`film`.`rental_rate` AS `price`,`sakila`.`film`.`length` AS `length`,`sakila`.`film`.`rating` AS `rating`,group_concat(concat(concat(upper(substr(`sakila`.`actor`.`first_name`,1,1)),lower(substr(`sakila`.`actor`.`first_name`,2,length(`sakila`.`actor`.`first_name`))),' ',concat(upper(substr(`sakila`.`actor`.`last_name`,1,1)),lower(substr(`sakila`.`actor`.`last_name`,2,length(`sakila`.`actor`.`last_name`)))))) separator ', ') AS `actors` from ((((`sakila`.`category` left join `sakila`.`film_category` on((`sakila`.`category`.`category_id` = `sakila`.`film_category`.`category_id`))) left join `sakila`.`film` on((`sakila`.`film_category`.`film_id` = `sakila`.`film`.`film_id`))) join `sakila`.`film_actor` on((`sakila`.`film`.`film_id` = `sakila`.`film_actor`.`film_id`))) join `sakila`.`actor` on((`sakila`.`film_actor`.`actor_id` = `sakila`.`actor`.`actor_id`))) group by `sakila`.`film`.`film_id`,`sakila`.`film`.`title`,`sakila`.`film`.`description`,`sakila`.`film`.`rental_rate`,`sakila`.`film`.`length`,`sakila`.`film`.`rating`,`sakila`.`category`.`name`"),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>sakila.nicer_but_slower_film_list</code>
         */
        val NICER_BUT_SLOWER_FILM_LIST: JNicerButSlowerFilmList = JNicerButSlowerFilmList()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<NicerButSlowerFilmListRecord> = NicerButSlowerFilmListRecord::class.java

    /**
     * The column <code>sakila.nicer_but_slower_film_list.FID</code>.
     */
    val FID: TableField<NicerButSlowerFilmListRecord, UInteger?> = createField(DSL.name("FID"), SQLDataType.INTEGERUNSIGNED.defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.title</code>.
     */
    val TITLE: TableField<NicerButSlowerFilmListRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.description</code>.
     */
    val DESCRIPTION: TableField<NicerButSlowerFilmListRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.category</code>.
     */
    val CATEGORY: TableField<NicerButSlowerFilmListRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR(25).nullable(false), this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.price</code>.
     */
    val PRICE: TableField<NicerButSlowerFilmListRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.DECIMAL(4, 2).defaultValue(DSL.inline("4.99", SQLDataType.DECIMAL)), this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.length</code>.
     */
    val LENGTH: TableField<NicerButSlowerFilmListRecord, UShort?> = createField(DSL.name("length"), SQLDataType.SMALLINTUNSIGNED, this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.rating</code>.
     */
    val RATING: TableField<NicerButSlowerFilmListRecord, NicerButSlowerFilmListRating?> = createField(DSL.name("rating"), SQLDataType.VARCHAR(5).defaultValue(DSL.inline("G", SQLDataType.VARCHAR)).asEnumDataType(NicerButSlowerFilmListRating::class.java), this, "")

    /**
     * The column <code>sakila.nicer_but_slower_film_list.actors</code>.
     */
    val ACTORS: TableField<NicerButSlowerFilmListRecord, String?> = createField(DSL.name("actors"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<NicerButSlowerFilmListRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<NicerButSlowerFilmListRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<NicerButSlowerFilmListRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sakila.nicer_but_slower_film_list</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sakila.nicer_but_slower_film_list</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sakila.nicer_but_slower_film_list</code> table reference
     */
    constructor(): this(DSL.name("nicer_but_slower_film_list"), null)
    override fun getSchema(): Schema? = if (aliased()) null else JSakila.SAKILA
    override fun `as`(alias: String): JNicerButSlowerFilmList = JNicerButSlowerFilmList(DSL.name(alias), this)
    override fun `as`(alias: Name): JNicerButSlowerFilmList = JNicerButSlowerFilmList(alias, this)
    override fun `as`(alias: Table<*>): JNicerButSlowerFilmList = JNicerButSlowerFilmList(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JNicerButSlowerFilmList = JNicerButSlowerFilmList(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JNicerButSlowerFilmList = JNicerButSlowerFilmList(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JNicerButSlowerFilmList = JNicerButSlowerFilmList(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): JNicerButSlowerFilmList = JNicerButSlowerFilmList(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JNicerButSlowerFilmList = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): JNicerButSlowerFilmList = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): JNicerButSlowerFilmList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JNicerButSlowerFilmList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JNicerButSlowerFilmList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JNicerButSlowerFilmList = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JNicerButSlowerFilmList = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JNicerButSlowerFilmList = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JNicerButSlowerFilmList = where(DSL.notExists(select))
}
