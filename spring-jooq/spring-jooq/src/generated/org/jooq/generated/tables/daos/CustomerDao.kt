/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.JCustomer
import org.jooq.generated.tables.pojos.Customer
import org.jooq.generated.tables.records.CustomerRecord
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerDao(configuration: Configuration?) : DAOImpl<CustomerRecord, Customer, UInteger>(JCustomer.CUSTOMER, Customer::class.java, configuration) {

    /**
     * Create a new CustomerDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Customer): UInteger? = o.customerId

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCustomerId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Customer> = fetchRange(JCustomer.CUSTOMER.CUSTOMER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    fun fetchByJCustomerId(vararg values: UInteger): List<Customer> = fetch(JCustomer.CUSTOMER.CUSTOMER_ID, *values)

    /**
     * Fetch a unique record that has <code>customer_id = value</code>
     */
    fun fetchOneByJCustomerId(value: UInteger): Customer? = fetchOne(JCustomer.CUSTOMER.CUSTOMER_ID, value)

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJStoreId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Customer> = fetchRange(JCustomer.CUSTOMER.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByJStoreId(vararg values: UInteger): List<Customer> = fetch(JCustomer.CUSTOMER.STORE_ID, *values)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJFirstName(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(JCustomer.CUSTOMER.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByJFirstName(vararg values: String): List<Customer> = fetch(JCustomer.CUSTOMER.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastName(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(JCustomer.CUSTOMER.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByJLastName(vararg values: String): List<Customer> = fetch(JCustomer.CUSTOMER.LAST_NAME, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJEmail(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(JCustomer.CUSTOMER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByJEmail(vararg values: String): List<Customer> = fetch(JCustomer.CUSTOMER.EMAIL, *values)

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJAddressId(lowerInclusive: UInteger?, upperInclusive: UInteger?): List<Customer> = fetchRange(JCustomer.CUSTOMER.ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    fun fetchByJAddressId(vararg values: UInteger): List<Customer> = fetch(JCustomer.CUSTOMER.ADDRESS_ID, *values)

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJActive(lowerInclusive: Byte?, upperInclusive: Byte?): List<Customer> = fetchRange(JCustomer.CUSTOMER.ACTIVE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    fun fetchByJActive(vararg values: Byte): List<Customer> = fetch(JCustomer.CUSTOMER.ACTIVE, *values.toTypedArray())

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCreateDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Customer> = fetchRange(JCustomer.CUSTOMER.CREATE_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    fun fetchByJCreateDate(vararg values: LocalDateTime): List<Customer> = fetch(JCustomer.CUSTOMER.CREATE_DATE, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Customer> = fetchRange(JCustomer.CUSTOMER.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByJLastUpdate(vararg values: LocalDateTime): List<Customer> = fetch(JCustomer.CUSTOMER.LAST_UPDATE, *values)
}
