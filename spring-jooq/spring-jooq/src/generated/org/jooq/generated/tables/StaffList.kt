/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables


import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.generated.Sakila
import org.jooq.generated.tables.records.StaffListRecord
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.UInteger


/**
 * VIEW
 */
@Suppress("UNCHECKED_CAST")
open class StaffList(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, StaffListRecord>?,
    parentPath: InverseForeignKey<out Record, StaffListRecord>?,
    aliased: Table<StaffListRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<StaffListRecord>(
    alias,
    Sakila.SAKILA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("VIEW"),
    TableOptions.view("create view `staff_list` as select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`sakila`.`city`.`city` AS `city`,`sakila`.`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`sakila`.`staff` `s` join `sakila`.`address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `sakila`.`city` on((`a`.`city_id` = `sakila`.`city`.`city_id`))) join `sakila`.`country` on((`sakila`.`city`.`country_id` = `sakila`.`country`.`country_id`)))"),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>sakila.staff_list</code>
         */
        val STAFF_LIST: StaffList = StaffList()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StaffListRecord> = StaffListRecord::class.java

    /**
     * The column <code>sakila.staff_list.ID</code>.
     */
    val ID: TableField<StaffListRecord, UInteger?> = createField(DSL.name("ID"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGERUNSIGNED)), this, "")

    /**
     * The column <code>sakila.staff_list.name</code>.
     */
    val NAME: TableField<StaffListRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(91), this, "")

    /**
     * The column <code>sakila.staff_list.address</code>.
     */
    val ADDRESS: TableField<StaffListRecord, String?> = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>sakila.staff_list.zip code</code>.
     */
    val `ZIP CODE`: TableField<StaffListRecord, String?> = createField(DSL.name("zip code"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>sakila.staff_list.phone</code>.
     */
    val PHONE: TableField<StaffListRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>sakila.staff_list.city</code>.
     */
    val CITY: TableField<StaffListRecord, String?> = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>sakila.staff_list.country</code>.
     */
    val COUNTRY: TableField<StaffListRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>sakila.staff_list.SID</code>.
     */
    val SID: TableField<StaffListRecord, UInteger?> = createField(DSL.name("SID"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<StaffListRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<StaffListRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<StaffListRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>sakila.staff_list</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>sakila.staff_list</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>sakila.staff_list</code> table reference
     */
    constructor(): this(DSL.name("staff_list"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Sakila.SAKILA
    override fun `as`(alias: String): StaffList = StaffList(DSL.name(alias), this)
    override fun `as`(alias: Name): StaffList = StaffList(alias, this)
    override fun `as`(alias: Table<*>): StaffList = StaffList(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): StaffList = StaffList(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): StaffList = StaffList(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): StaffList = StaffList(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): StaffList = StaffList(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): StaffList = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): StaffList = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): StaffList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): StaffList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): StaffList = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): StaffList = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): StaffList = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): StaffList = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): StaffList = where(DSL.notExists(select))
}
