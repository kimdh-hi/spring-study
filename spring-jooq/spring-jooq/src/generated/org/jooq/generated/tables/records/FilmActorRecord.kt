/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.records


import java.time.LocalDateTime

import org.jooq.Record2
import org.jooq.generated.tables.JFilmActor
import org.jooq.generated.tables.pojos.FilmActor
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmActorRecord() : UpdatableRecordImpl<FilmActorRecord>(JFilmActor.FILM_ACTOR) {

    open var actorId: UInteger?
        set(value): Unit = set(0, value)
        get(): UInteger? = get(0) as UInteger?

    open var filmId: UInteger?
        set(value): Unit = set(1, value)
        get(): UInteger? = get(1) as UInteger?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UInteger?, UInteger?> = super.key() as Record2<UInteger?, UInteger?>

    /**
     * Create a detached, initialised FilmActorRecord
     */
    constructor(actorId: UInteger? = null, filmId: UInteger? = null, lastUpdate: LocalDateTime? = null): this() {
        this.actorId = actorId
        this.filmId = filmId
        this.lastUpdate = lastUpdate
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised FilmActorRecord
     */
    constructor(value: FilmActor?): this() {
        if (value != null) {
            this.actorId = value.actorId
            this.filmId = value.filmId
            this.lastUpdate = value.lastUpdate
            resetChangedOnNotNull()
        }
    }
}
