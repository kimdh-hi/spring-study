/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.routines.references


import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.generated.routines.JFilmInStock
import org.jooq.generated.routines.JFilmNotInStock
import org.jooq.generated.routines.JGetCustomerBalance
import org.jooq.generated.routines.JInventoryHeldByCustomer
import org.jooq.generated.routines.JInventoryInStock



/**
 * Call <code>sakila.film_in_stock</code>
 */
fun filmInStock(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Int? {
    val p = JFilmInStock()
    p.setPFilmId(pFilmId)
    p.setPStoreId(pStoreId)

    p.execute(configuration)
    return p.getPFilmCount()
}

/**
 * Call <code>sakila.film_not_in_stock</code>
 */
fun filmNotInStock(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Int? {
    val p = JFilmNotInStock()
    p.setPFilmId(pFilmId)
    p.setPStoreId(pStoreId)

    p.execute(configuration)
    return p.getPFilmCount()
}

/**
 * Call <code>sakila.get_customer_balance</code>
 */
fun getCustomerBalance(
      configuration: Configuration
    , pCustomerId: Int?
    , pEffectiveDate: LocalDateTime?
): BigDecimal? {
    val f = JGetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sakila.get_customer_balance</code> as a field.
 */
fun getCustomerBalance(
      pCustomerId: Int?
    , pEffectiveDate: LocalDateTime?
): Field<BigDecimal?> {
    val f = JGetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField()
}

/**
 * Get <code>sakila.get_customer_balance</code> as a field.
 */
fun getCustomerBalance(
      pCustomerId: Field<Int?>
    , pEffectiveDate: Field<LocalDateTime?>
): Field<BigDecimal?> {
    val f = JGetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField()
}

/**
 * Call <code>sakila.inventory_held_by_customer</code>
 */
fun inventoryHeldByCustomer(
      configuration: Configuration
    , pInventoryId: Int?
): Int? {
    val f = JInventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sakila.inventory_held_by_customer</code> as a field.
 */
fun inventoryHeldByCustomer(
      pInventoryId: Int?
): Field<Int?> {
    val f = JInventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Get <code>sakila.inventory_held_by_customer</code> as a field.
 */
fun inventoryHeldByCustomer(
      pInventoryId: Field<Int?>
): Field<Int?> {
    val f = JInventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Call <code>sakila.inventory_in_stock</code>
 */
fun inventoryInStock(
      configuration: Configuration
    , pInventoryId: Int?
): Byte? {
    val f = JInventoryInStock()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>sakila.inventory_in_stock</code> as a field.
 */
fun inventoryInStock(
      pInventoryId: Int?
): Field<Byte?> {
    val f = JInventoryInStock()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Get <code>sakila.inventory_in_stock</code> as a field.
 */
fun inventoryInStock(
      pInventoryId: Field<Int?>
): Field<Byte?> {
    val f = JInventoryInStock()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}
